name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 bandit pytest
        pip install -r requirements.txt || true
    
    - name: Run Black (code formatting check)
      run: |
        black --check --diff src/ tests/
    
    - name: Run Flake8 (linting)
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run Bandit (security check)
      run: |
        bandit -r src/ -ll
      continue-on-error: true

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-tk
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install portaudio
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/Library/Caches/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install numpy sounddevice psutil
    
    - name: Install optional dependencies (continue on error)
      run: |
        pip install -r requirements.txt || echo "Some dependencies failed to install, continuing..."
      continue-on-error: true
    
    - name: Run tests
      run: |
        pytest tests/ -v --tb=short || echo "Some tests failed"
      continue-on-error: true
    
    - name: Test imports
      run: |
        python -c "import sys; sys.path.insert(0, 'src'); from audio_capture import AudioCapture; print('AudioCapture OK')"
        python -c "import sys; sys.path.insert(0, 'src'); from voice_activity_detector import SimpleVAD; print('VAD OK')"
        python -c "import sys; sys.path.insert(0, 'src'); from performance_optimizer import PerformanceOptimizer; print('Performance OK')"
        python -c "import sys; sys.path.insert(0, 'src'); from export_manager import ExportManager; print('Export OK')"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install Bandit
      run: |
        pip install bandit
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ -ll || echo "Security issues found - check report"
      continue-on-error: true
    
    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json
